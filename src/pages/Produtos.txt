import { useState, createContext, useContext } from 'react';
import { FaSyncAlt, FaSearch, FaFilter, FaEllipsisV, FaEdit, FaTrash, FaEye } from 'react-icons/fa';
import { motion } from 'framer-motion';

// Contexto de Produtos
const ProductContext = createContext();

const ProductProvider = ({ children }) => {
  const [products, setProducts] = useState([
    { id: 1, name: "Smartphone X", date: "15/05/2023", status: "Ativo" },
    { id: 2, name: "Notebook Pro", date: "22/06/2023", status: "Desabilitado" },
    { id: 3, name: "Fone Bluetooth", date: "10/07/2023", status: "Ativo" }
  ]);

  const toggleStatus = (productId) => {
    setProducts(prev => prev.map(p => 
      p.id === productId ? {...p, status: p.status === "Ativo" ? "Desabilitado" : "Ativo"} : p
    ));
  };

  const addProduct = (newProduct) => {
    setProducts(prev => [...prev, { 
      id: Date.now(), 
      ...newProduct,
      date: new Date().toLocaleDateString('pt-BR'),
      status: "Ativo"
    }]);
  };

  const deleteProduct = (productId) => {
    setProducts(prev => prev.filter(p => p.id !== productId));
  };

  return (
    <ProductContext.Provider value={{ products, toggleStatus, addProduct, deleteProduct }}>
      {children}
    </ProductContext.Provider>
  );
};

const useProducts = () => useContext(ProductContext);

// Componente de Badge de Status
const StatusBadge = ({ status, onToggle }) => {
  const statusMap = {
    Ativo: { class: 'bg-green-100 text-green-800', label: 'Ativo' },
    Desabilitado: { class: 'bg-purple-100 text-purple-800', label: 'Desabilitado' }
  };

  return (
    <span 
      onClick={onToggle}
      className={`px-3 py-1 rounded-full text-xs font-bold cursor-pointer ${
        statusMap[status]?.class || 'bg-gray-100'
      }`}
    >
      {statusMap[status]?.label || status}
    </span>
  );
};

// Componente de Dropdown de Ações
const ProductActionsDropdown = ({ productId, onEdit, onDelete }) => {
  const [isOpen, setIsOpen] = useState(false);

  return (
    <div className="relative">
      <button 
        onClick={() => setIsOpen(!isOpen)}
        className="p-1 hover:bg-purple-300 rounded-full"
        aria-label="Ações"
      >
        <FaEllipsisV />
      </button>
      
      {isOpen && (
        <div className="absolute right-0 mt-2 w-48 bg-white rounded-md shadow-lg z-10">
          <div className="py-1">
            <button
              onClick={() => { onEdit(); setIsOpen(false); }}
              className="flex items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 w-full text-left"
            >
              <FaEdit className="mr-2" /> Editar
            </button>
            <button
              onClick={() => { onDelete(); setIsOpen(false); }}
              className="flex items-center px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 w-full text-left"
            >
              <FaTrash className="mr-2" /> Excluir
            </button>
          </div>
        </div>
      )}
    </div>
  );
};

// Componente de Card de Produto
const ProductCard = ({ product }) => {
  const { toggleStatus, deleteProduct } = useProducts();

  return (
    <motion.div
      initial={{ opacity: 0, y: 10 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.3 }}
      className="flex items-center justify-between bg-purple-400 text-white p-4 rounded-lg hover:bg-purple-500 transition-colors"
    >
      <div>
        <strong className="block">{product.name}</strong>
        <span className="text-xs opacity-80">Criado em {product.date}</span>
      </div>
      
      <StatusBadge 
        status={product.status} 
        onToggle={() => toggleStatus(product.id)} 
      />
      
      <ProductActionsDropdown
        productId={product.id}
        onEdit={() => console.log('Editar produto:', product.id)}
        onDelete={() => deleteProduct(product.id)}
      />
    </motion.div>
  );
};

// Componente de Paginação
const Pagination = ({ currentPage, totalPages, onPageChange }) => {
  return (
    <div className="flex justify-center mt-6 space-x-2">
      {Array.from({ length: totalPages }).map((_, index) => (
        <button
          key={index}
          onClick={() => onPageChange(index + 1)}
          className={`w-8 h-8 rounded-full ${
            currentPage === index + 1
              ? 'bg-purple-600 text-white'
              : 'bg-gray-200 hover:bg-gray-300'
          }`}
        >
          {index + 1}
        </button>
      ))}
    </div>
  );
};

// Componente Principal
const YourProductsPage = () => {
  const { products } = useProducts();
  const [searchTerm, setSearchTerm] = useState('');
  const [statusFilter, setStatusFilter] = useState('Todos');
  const [currentPage, setCurrentPage] = useState(1);
  const productsPerPage = 5;

  // Filtros combinados
  const filteredProducts = products.filter(product => {
    const matchesSearch = product.name.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesStatus = statusFilter === 'Todos' || product.status === statusFilter;
    return matchesSearch && matchesStatus;
  });

  // Paginação
  const indexOfLastProduct = currentPage * productsPerPage;
  const indexOfFirstProduct = indexOfLastProduct - productsPerPage;
  const currentProducts = filteredProducts.slice(indexOfFirstProduct, indexOfLastProduct);

  return (
    <main className="flex-1 p-6">
      <h1 className="text-2xl font-bold text-gray-800 mb-6">Seus Produtos</h1>

      {/* Barra de Controles */}
      <div className="flex flex-col sm:flex-row justify-between gap-4 mb-6">
        <div className="flex gap-3">
          <button className="p-2 bg-white border border-purple-200 rounded-md text-purple-700 hover:bg-purple-50 transition-colors">
            <FaSyncAlt className="text-lg" />
          </button>
          
          <div className="relative flex-1 min-w-[200px]">
            <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
              <FaSearch className="text-gray-400" />
            </div>
            <input
              type="text"
              placeholder="Buscar produtos..."
              className="pl-10 pr-4 py-2 w-full border border-gray-300 rounded-md focus:ring-2 focus:ring-purple-500 focus:border-transparent"
              value={searchTerm}
              onChange={(e) => {
                setSearchTerm(e.target.value);
                setCurrentPage(1);
              }}
            />
          </div>
        </div>

        <div className="flex gap-3">
          <div className="relative">
            <select
              className="appearance-none pl-3 pr-8 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-purple-500 focus:border-transparent bg-white"
              value={statusFilter}
              onChange={(e) => {
                setStatusFilter(e.target.value);
                setCurrentPage(1);
              }}
            >
              <option value="Todos">Todos os status</option>
              <option value="Ativo">Ativo</option>
              <option value="Desabilitado">Desabilitado</option>
            </select>
            <div className="absolute inset-y-0 right-0 flex items-center pr-2 pointer-events-none">
              <FaFilter className="text-gray-400" />
            </div>
          </div>
        </div>
      </div>

      {/* Info e Contador */}
      <div className="flex justify-between items-center mb-4">
        <p className="text-gray-600">
          Mostrando {currentProducts.length} de {filteredProducts.length} produtos
        </p>
      </div>

      {/* Lista de Produtos */}
      <div className="space-y-3 mb-6">
        {currentProducts.length > 0 ? (
          currentProducts.map(product => (
            <ProductCard key={product.id} product={product} />
          ))
        ) : (
          <div className="text-center py-10 text-gray-500">
            Nenhum produto encontrado
          </div>
        )}
      </div>

      {/* Paginação */}
      {filteredProducts.length > productsPerPage && (
        <Pagination
          currentPage={currentPage}
          totalPages={Math.ceil(filteredProducts.length / productsPerPage)}
          onPageChange={setCurrentPage}
        />
      )}
    </main>
  );
};

// Componente Final que engloba tudo
const YourProductsApp = () => {
  return (
    <ProductProvider>
      <div className="flex min-h-screen bg-purple-50">
        {/* Sidebar - Pode ser adicionada aqui */}
        <YourProductsPage />
      </div>
    </ProductProvider>
  );
};

export default YourProductsApp;